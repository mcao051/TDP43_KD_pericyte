#Example processing of samples
#trimming, alignment and quantification
java -jar trimmomatic-0.38.jar PE -threads 32 -trimlog CS374_trimfiles CS374_R1.fq.gz CS374_R2.fq.gz paired_CS374_R1.fq.gz unpaired_CS374_R1.fq.gz paired_CS374_R2.fq.gz unpaired_CS374_R2.fq.gz ILLUMINACLIP:PolyAtail.fa:2:30:10:8:TRUE MINLEN:36 && java -jar trimmomatic-0.38.jar PE -threads 32 -trimlog CS375_trimfiles CS375_R1.fq.gz CS375_R2.fq.gz paired_CS375_R1.fq.gz unpaired_CS375_R1.fq.gz paired_CS375_R2.fq.gz unpaired_CS375_R2.fq.gz ILLUMINACLIP:PolyAtail.fa:2:30:10:8:TRUE MINLEN:36 && java -jar trimmomatic-0.38.jar PE -threads 32 -trimlog CS376_trimfiles CS376_R1.fq.gz CS376_R2.fq.gz paired_CS376_R1.fq.gz unpaired_CS376_R1.fq.gz paired_CS376_R2.fq.gz unpaired_CS376_R2.fq.gz ILLUMINACLIP:PolyAtail.fa:2:30:10:8:TRUE MINLEN:36 && java -jar trimmomatic-0.38.jar PE -threads 32 -trimlog CS377_trimfiles CS377_R1.fq.gz CS377_R2.fq.gz paired_CS377_R1.fq.gz unpaired_CS377_R1.fq.gz paired_CS377_R2.fq.gz unpaired_CS377_R2.fq.gz ILLUMINACLIP:PolyAtail.fa:2:30:10:8:TRUE MINLEN:36 && java -jar trimmomatic-0.38.jar PE -threads 32 -trimlog CS390_trimfiles CS390_R1.fq.gz CS390_R2.fq.gz paired_CS390_R1.fq.gz unpaired_CS390_R1.fq.gz paired_CS390_R2.fq.gz unpaired_CS390_R2.fq.gz ILLUMINACLIP:PolyAtail.fa:2:30:10:8:TRUE MINLEN:36 && java -jar trimmomatic-0.38.jar PE -threads 32 -trimlog CS391_trimfiles CS391_R1.fq.gz CS391_R2.fq.gz paired_CS391_R1.fq.gz unpaired_CS391_R1.fq.gz paired_CS391_R2.fq.gz unpaired_CS391_R2.fq.gz ILLUMINACLIP:PolyAtail.fa:2:30:10:8:TRUE MINLEN:36

hisat2 -p 32 --dta --known-splicesite-infile genome.ss -x genome_snp_tran -1 paired_CS374_R1.fq.gz -2 paired_CS374_R2.fq.gz -S CS374.sam && hisat2 -p 32 --dta --known-splicesite-infile genome.ss -x genome_snp_tran -1 paired_CS375_R1.fq.gz -2 paired_CS375_R2.fq.gz -S CS375.sam && hisat2 -p 32 --dta --known-splicesite-infile genome.ss -x genome_snp_tran -1 paired_CS376_R1.fq.gz -2 paired_CS376_R2.fq.gz -S CS376.sam && hisat2 -p 32 --dta --known-splicesite-infile genome.ss -x genome_snp_tran -1 paired_CS377_R1.fq.gz -2 paired_CS377_R2.fq.gz -S CS377.sam && hisat2 -p 32 --dta --known-splicesite-infile genome.ss -x genome_snp_tran -1 paired_CS390_R1.fq.gz -2 paired_CS390_R2.fq.gz -S CS390.sam && hisat2 -p 32 --dta --known-splicesite-infile genome.ss -x genome_snp_tran -1 paired_CS391_R1.fq.gz -2 paired_CS391_R2.fq.gz -S CS391.sam

samtools view -bS CS374.sam > CS374_unsorted.bam && samtools sort -@ 32 CS374_unsorted.bam CS374 && samtools view -bS CS375.sam > CS375_unsorted.bam && samtools sort -@ 32 CS375_unsorted.bam CS375 && samtools view -bS CS376.sam > CS376_unsorted.bam && samtools sort -@ 32 CS376_unsorted.bam CS376 && samtools view -bS CS377.sam > CS377_unsorted.bam && samtools sort -@ 32 CS377_unsorted.bam CS377 && samtools view -bS CS390.sam > CS390_unsorted.bam && samtools sort -@ 32 CS390_unsorted.bam CS390 && samtools view -bS CS391.sam > CS391_unsorted.bam && samtools sort -@ 32 CS391_unsorted.bam CS391stringtie -p 32 -G  Homo_sapiens.GRCh38.93.gtf -o CS374.gtf -l CS374 CS374.bam && stringtie -p 32 -G  Homo_sapiens.GRCh38.93.gtf -o CS375.gtf -l CS375 CS375.bam && stringtie -p 32 -G  Homo_sapiens.GRCh38.93.gtf -o CS376.gtf -l CS376 CS376.bam && stringtie -p 32 -G  Homo_sapiens.GRCh38.93.gtf -o CS377.gtf -l CS377 CS377.bam && stringtie -p 32 -G  Homo_sapiens.GRCh38.93.gtf -o CS390.gtf -l CS390 CS390.bam && stringtie -p 32 -G  Homo_sapiens.GRCh38.93.gtf -o CS391.gtf -l CS391 CS391.bam
stringtie --merge -p 32 -G Homo_sapiens.GRCh38.93.gtf -o stringtie_allsample_TDP43KO_merged.gtf TDP43KO_mergelist.txt
stringtie -e -B -p 32 -G stringtie_allsample_TDP43KO_merged.gtf -o ballgown/CS374/CS374_cleanstringtie.gtf CS374.bam

#FPKM data from R (ballgown package)
> pheno_data <- read.csv("TDP43KO_project_phenodata.csv")
> bg_TDP43 <- ballgown(dataDir = "ballgown", samplePattern = "CS3", pData = pheno_data)
> bg_TDP43
#filter low abundance genes
> bg_TDP43_filt <- subset(bg_TDP43, "rowVars(texpr(bg_TDP43))>1", genomesubset=TRUE)
> bg_TDP43_filt
> results_transcripts_TDP43_filt <- stattest(bg_TDP43_filt, feature = 'transcript', meas = 'FPKM', covariate = "treatments", getFC = TRUE)
> results_transcripts_TDP43_with_names <- data.frame(geneNames=ballgown::geneNames(bg_TDP43_filt), geneIDs=ballgown::geneIDs(bg_TDP43_filt), results_transcripts_TDP43_filt)
> results_transcripts_TDP43_with_names_ordered <- arrange(results_transcripts_TDP43_with_names,pval)
> results_genes_TDP43_filt_ordered <- arrange(results_genes_TDP43_filt,pval)

#Example R processing (DESeq2 and DEXSeq package)
> datafiles=c("t_data H189scr.ctab","t_data H189siTDP.ctab","t_data H189scr1.ctab","t_data H189siTDP1.ctab","t_data H194bscr.ctab","t_data H194bsiTDP.ctab","t_data H227scr.ctab",
"t_data H227siTDP.ctab","t_data H244scr.ctab","t_data H244siTDP.ctab","t_data H245scr.ctab","t_data H245siTDP.ctab","t_data H246scr.ctab",
"t_data H246siTDP.ctab","t_data H246scr1.ctab","t_data H246siTDP1.ctab","t_data H209scr.ctab","t_data H209siTDP.ctab")
> txi <- tximport(datafiles, type = "stringtie", tx2gene = tx2gene)
> dim(txi$counts)
> sampleCondition=c("Control","Knockdown","Control","Knockdown","Control","Knockdown","Control","Knockdown","Control","Knockdown",
"Control","Knockdown","Control","Knockdown","Control","Knockdown","Control","Knockdown")
> sampleSubject=c("P1","P1","P1","P1","P2","P2","P3","P3","P4","P4","P5","P5","P6","P6","P6","P6","P7","P7")
> sampleTable = data.frame(condition=sampleCondition, subject=sampleSubject)
> rownames(sampleTable) <- colnames(txi$counts)
> dds <- DESeqDataSetFromTximport(txi, sampleTable, ~condition)
> dds <- DESeqDataSetFromTximport(txi, sampleTable, ~subject)
> colData(dds)
> dds<-DESeq(dds)
> ddsMF <- dds
> design(ddsMF) <- formula(~ subject + condition)
> ddsMF <- DESeq(ddsMF)
> resMF <- results(ddsMF)
> resMFOrdered <- resMF[order(resMF$padj),]
> resMFSig <- subset(resMFOrdered, padj < 0.05)
> resMFSig

> hse <- makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl")
> exonicParts = exonicParts( hse, linked.to.single.gene.only = TRUE )
> bamfiles <- dir(".", "bam$")
> bamlst = BamFileList( bamfiles, index=character(), yieldSize=100000, obeyQname=TRUE )
> SE = summarizeOverlaps( exonicParts, bamlst, mode="Union", singleEnd=FALSE, ignore.strand=TRUE, inter.feature=FALSE, fragments=TRUE )
> colData(SE)$condition=c("control","knockdown","control","knockdown","control","knockdown",
         "control","knockdown","control","knockdown","control","knockdown","control","knockdown", "control","knockdown","control","knockdown")
> dxd = DEXSeqDataSetFromSE(SE, design= ~ sample + exon + condition:exon)
> dxr = DEXSeq(dxd)
> dxrOrdered <- dxr[order(dxr$pvalue),]
> dxrSig <- subset(dxrOrdered, padj < 0.05)
> dxrSig










